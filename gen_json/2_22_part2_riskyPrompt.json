 { "typeName": "VAR_typeName", "domainType": "NON_DOMAIN", "assertions": [], "hasOptionalContainer": false, "hasCollectionContainer": false, "hasListContainer": false, "hasSetContainer": false, "hasStreamContainer": false, "containerTypeName": "VAR_containerTypeName", "containerAssertions": []}}], "returnType": {"@class": "nitrox.dlc.mirror.model.AssertedContainableTypeModel", "typeName": "VAR_typeName", "domainType": "NON_DOMAIN", "assertions": [], "hasOptionalContainer": false, "hasCollectionContainer": false, "hasListContainer": false, "hasSetContainer": false, "hasStreamContainer": false, "containerTypeName": "VAR_containerTypeName", "containerAssertions": []}, "publishedEventTypeNames": "VAR_publishedEventTypeNames", "listenedEventTypeName": null, "getter": false, "setter": false}, {"@class": "nitrox.dlc.mirror.model.MethodModel", "name": "VAR_name", "declaredByTypeName": "VAR_declaredByTypeName", "accessLevel": "PUBLIC", "parameters": [], "returnType": {"@class": "nitrox.dlc.mirror.model.AssertedContainableTypeModel", "typeName": "VAR_typeName", "domainType": "NON_DOMAIN", "assertions": [], "hasOptionalContainer": false, "hasCollectionContainer": false, "hasListContainer": false, "hasSetContainer": false, "hasStreamContainer": false, "containerTypeName": "VAR_containerTypeName", "containerAssertions": []}, "publishedEventTypeNames": "VAR_publishedEventTypeNames", "listenedEventTypeName": null, "getter": false, "setter": false}, {"@class": "nitrox.dlc.mirror.model.MethodModel", "name": "VAR_name", "declaredByTypeName": "VAR_declaredByTypeName", "accessLevel": "PUBLIC", "parameters": [], "returnType": {"@class": "nitrox.dlc.mirror.model.AssertedContainableTypeModel", "typeName": "VAR_typeName", "domainType": "NON_DOMAIN", "assertions": [], "hasOptionalContainer": false, "hasCollectionContainer": false, "hasListContainer": false, "hasSetContainer": false, "hasStreamContainer": false, "containerTypeName": "VAR_containerTypeName", "containerAssertions": []}, "publishedEventTypeNames": "VAR_publishedEventTypeNames", "listenedEventTypeName": null, "getter": false, "setter": false}, {"@class": "nitrox.dlc.mirror.model.MethodModel", "name": "VAR_name", "declaredByTypeName": "VAR_declaredByTypeName", "accessLevel": "PUBLIC", "parameters": [], "returnType": {"@class": "nitrox.dlc.mirror.model.AssertedContainableTypeModel", "typeName": "VAR_typeName", "domainType": "NON_DOMAIN", "assertions": [], "hasOptionalContainer": false, "hasCollectionContainer": false, "hasListContainer": false, "hasSetContainer": false, "hasStreamContainer": false, "containerTypeName": "VAR_containerTypeName", "containerAssertions": []}, "publishedEventTypeNames": "VAR_publishedEventTypeNames", "listenedEventTypeName": null, "getter": false, "setter": false}, {"@class": "nitrox.dlc.mirror.model.MethodModel", "name": "VAR_name", "declaredByTypeName": "VAR_declaredByTypeName", "accessLevel": "PUBLIC", "parameters": [], "returnType": {"@class": "nitrox.dlc.mirror.model.AssertedContainableTypeModel", "typeName": "VAR_typeName", "domainType": "NON_DOMAIN", "assertions": [], "hasOptionalContainer": false, "hasCollectionContainer": false, "hasListContainer": false, "hasSetContainer": false, "hasStreamContainer": false, "containerTypeName": "VAR_containerTypeName", "containerAssertions": []}, "publishedEventTypeNames": "VAR_publishedEventTypeNames", "listenedEventTypeName": null, "getter": false, "setter": false}, {"@class": "nitrox.dlc.mirror.model.MethodModel", "name": "VAR_name", "declaredByTypeName": "VAR_declaredByTypeName", "accessLevel": "PUBLIC", "parameters": [], "returnType": {"@class": "nitrox.dlc.mirror.model.AssertedContainableTypeModel", "typeName": "VAR_typeName", "domainType": "NON_DOMAIN", "assertions": [], "hasOptionalContainer": false, "hasCollectionContainer": false, "hasListContainer": false, "hasSetContainer": false, "hasStreamContainer": false, "containerTypeName": "VAR_containerTypeName", "containerAssertions": []}, "publishedEventTypeNames": "VAR_publishedEventTypeNames", "listenedEventTypeName": null, "getter": false, "setter": false}], "referencedRepositoryTypeNames": "VAR_referencedRepositoryTypeNames", "domainServiceInterfaceTypeNames": "VAR_domainServiceInterfaceTypeNames", "inheritanceHierarchyTypeNames": "VAR_inheritanceHierarchyTypeNames", "allInterfaceTypeNames": "VAR_allInterfaceTypeNames"}<END>
   */
  @Test
  public void repository_mirror() {
    Assertions.assertThatType(repositoryProvider.getRepositoryType(VAR_domainTypeIdentity)).isNotNull();
    Assertions.assertThat(repositoryProvider.getRepositoryType(VAR_domainTypeIdentity)).matches(selfType -> {
      Assertions.assertThat(selfType.getTypeName()).isEqualTo("VAR_typeName");
      Assertions.assertThat(selfType.getAssertedContainableType().getTypeName()).isEqualTo("VAR_typeName");
      Assertions.assertThat(selfType.getAssertedContainableType().getDomainType()).isEqualTo(DomainEntityReferenceModel.builder()
        .typeName("VAR_typeName")
        .domainType("IDENTITY")
        .assertions()
        .build());
      Assertions.assertThat(selfType.getAssertedContainableType().getHasOptionalContainer()).isFalse();
      Assertions.assertThat(selfType.getAssertedContainableType().getHasCollectionContainer()).isFalse();
      Assertions.assertThat(selfType.getAssertedContainableType().getHasListContainer()).isFalse();
      Assertions.assertThat(selfType.getAssertedContainableType().getHasSetContainer()).isFalse();
      Assertions.assertThat(selfType.getAssertedContainableType().getHasStreamContainer()).isFalse();
      Assertions.assertThat(selfType.getAssertedContainableType().getContainerTypeName()).isNull();
      Assertions.assertThat(selfType.getAssertedContainableType().getContainerAssertions()).isNullOrEmpty();
      Assertions.assertThat(selfType.getAccessLevel()).isEqualTo(AccessLevel.PUBLIC);
      Assertions.assertThat(selfType.getDeclaringTypeName()).isEqualTo("VAR_declaredByTypeName");
      Assertions.assertThat(selfType.getParameters()).isNullOrEmpty();
      Assertions.assertThat(selfType.getReturnType()).isNotNull();
      Assertions.assertThat(selfType.getReturnType().getTypeName()).isEqualTo("VAR_typeName");
      Assertions.assertThat(selfType.getReturnType().getAssertedContainableType()).isNotNull();
      Assertions.assertThat(selfType.getReturnType().getAssertedContainableType().getTypeName()).isEqualTo("VAR_typeName");
      Assertions.assertThat(selfType.getReturnType().getAssertedContainableType().getDomainType()).isEqualTo(DomainEntityReferenceModel.builder()
        .typeName("VAR_typeName")
        .domainType("IDENTITY")
        .assertions()
        .build());
      Assertions.assertThat(selfType.getReturnType().getAssertedContainableType().getHasOptionalContainer()).isFalse();
      Assertions.assertThat(selfType.getReturnType().getAssertedContainableType().getHasCollectionContainer()).isFalse();
      Assertions.assertThat(selfType.getReturnType().getAssertedContainableType().getHasListContainer()).isFalse();
      Assertions.assertThat(selfType.getReturnType().getAssertedContainableType().getHasSetContainer()).isFalse();
      Assertions.assertThat(selfType.getReturnType().getAssertedContainableType().getHasStreamContainer()).isFalse();
      Assertions.assertThat(selfType.getReturnType().getAssertedContainableType().getContainerTypeName()).isNull();
      Assertions.assertThat(selfType.getReturnType().getAssertedContainableType().getContainerAssertions()).isNullOrEmpty();
      Assertions.assertThat(selfType.getReturnType().getHasOptionalContainer()).isFalse();
      Assertions.assertThat(selfType.getReturnType().getHasCollectionContainer()).isFalse();
      Assertions.assertThat(selfType.getReturnType().getHasListContainer()).isFalse();
      Assertions.assertThat(selfType.getReturnType().getHasSetContainer()).isFalse();
      Assertions.assertThat(selfType.getReturnType().getHasStreamContainer()).isFalse();
      Assertions.assertThat(selfType.getReturnType().getContainerTypeName()).isNull();
      Assertions.assertThat(selfType.getReturnType().getContainerAssertions()).isNullOrEmpty();
      Assertions.assertThat(selfType.isGetter()).isFalse();
      Assertions.assertThat(selfType.isSetter()).isFalse();
      Assertions.assertThat(selfType.getPublishedEventTypeNames()).isEqualTo("VAR_publishedEventTypeNames");
      Assertions.assertThat(selfType.getListenedEventTypeName()).isNull();
      Assertions.assertThat(selfType.getInheritanceHierarchyTypeNames()).isEqualTo("VAR_inheritanceHierarchyTypeNames");
      Assertions.assertThat(selfType.getAllInterfaceTypeNames()).isEqualTo("VAR_allInterfaceTypeNames");
      return true;
    });
    Assertions.assertThat(repositoryProvider.getRepositoryType(VAR_domainTypeIdentity)).matches(selfType -> {
      Assertions.assertThat(selfType.getMethodCandidates(ByAccessorReferenceModelMother.methodName("VAR_declaredByTypeName", "VAR_publicReadable", "VAR_publicWriteable", "VAR_getter", "VAR_setter", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_paramTypeName", "VAR_