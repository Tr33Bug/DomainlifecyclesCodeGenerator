 {  "typeName": "VAR_typeName",  "domainType": "NON_DOMAIN",  "assertions": [],  "hasOptionalContainer": false,  "hasCollectionContainer": false,  "hasListContainer": false,  "hasSetContainer": false,  "hasStreamContainer": false,  "containerTypeName": "VAR_containerTypeName",  "containerAssertions": []}}],  "returnType": {"@class": "nitrox.dlc.mirror.model.AssertedContainableTypeModel",  "typeName": "VAR_typeName",  "domainType": "NON_DOMAIN",  "assertions": [],  "hasOptionalContainer": false,  "hasCollectionContainer": false,  "hasListContainer": false,  "hasSetContainer": false,  "hasStreamContainer": false,  "containerTypeName": "VAR_containerTypeName",  "containerAssertions": []},  "publishedEventTypeNames": "VAR_publishedEventTypeNames",  "listenedEventTypeName": null,  "getter": false,  "setter": false}, {"@class": "nitrox.dlc.mirror.model.MethodModel",  "name": "VAR_name",  "declaredByTypeName": "VAR_declaredByTypeName",  "accessLevel": "PUBLIC",  "parameters": [],  "returnType": {"@class": "nitrox.dlc.mirror.model.AssertedContainableTypeModel",  "typeName": "VAR_typeName",  "domainType": "NON_DOMAIN",  "assertions": [],  "hasOptionalContainer": false,  "hasCollectionContainer": false,  "hasListContainer": false,  "hasSetContainer": false,  "hasStreamContainer": false,  "containerTypeName": "VAR_containerTypeName",  "containerAssertions": []},  "publishedEventTypeNames": "VAR_publishedEventTypeNames",  "listenedEventTypeName": null,  "getter": false,  "setter": false}, {"@class": "nitrox.dlc.mirror.model.MethodModel",  "name": "VAR_name",  "declaredByTypeName": "VAR_declaredByTypeName",  "accessLevel": "PUBLIC",  "parameters": [],  "returnType": {"@class": "nitrox.dlc.mirror.model.AssertedContainableTypeModel",  "typeName": "VAR_typeName",  "domainType": "NON_DOMAIN",  "assertions": [],  "hasOptionalContainer": false,  "hasCollectionContainer": false,  "hasListContainer": false,  "hasSetContainer": false,  "hasStreamContainer": false,  "containerTypeName": "VAR_containerTypeName",  "containerAssertions": []},  "publishedEventTypeNames": "VAR_publishedEventTypeNames",  "listenedEventTypeName": null,  "getter": false,  "setter": false}, {"@class": "nitrox.dlc.mirror.model.MethodModel",  "name": "VAR_name",  "declaredByTypeName": "VAR_declaredByTypeName",  "accessLevel": "PUBLIC",  "parameters": [],  "returnType": {"@class": "nitrox.dlc.mirror.model.AssertedContainableTypeModel",  "typeName": "VAR_typeName",  "domainType": "NON_DOMAIN",  "assertions": [],  "hasOptionalContainer": false,  "hasCollectionContainer": false,  "hasListContainer": false,  "hasSetContainer": false,  "hasStreamContainer": false,  "containerTypeName": "VAR_containerTypeName",  "containerAssertions": []},  "publishedEventTypeNames": "VAR_publishedEventTypeNames",  "listenedEventTypeName": null,  "getter": false,  "setter": false}, {"@class": "nitrox.dlc.mirror.model.MethodModel",  "name": "VAR_name",  "declaredByTypeName": "VAR_declaredByTypeName",  "accessLevel": "PUBLIC",  "parameters": [],  "returnType": {"@class": "nitrox.dlc.mirror.model.AssertedContainableTypeModel",  "typeName": "VAR_typeName",  "domainType": "NON_DOMAIN",  "assertions": [],  "hasOptionalContainer": false,  "hasCollectionContainer": false,  "hasListContainer": false,  "hasSetContainer": false,  "hasStreamContainer": false,  "containerTypeName": "VAR_containerTypeName",  "containerAssertions": []},  "publishedEventTypeNames": "VAR_publishedEventTypeNames",  "listenedEventTypeName": null,  "getter": false,  "setter": false}, {"@class": "nitrox.dlc.mirror.model.MethodModel",  "name": "VAR_name",  "declaredByTypeName": "VAR_declaredByTypeName",  "accessLevel": "PUBLIC",  "parameters": [],  "returnType": {"@class": "nitrox.dlc.mirror.model.AssertedContainableTypeModel",  "typeName": "VAR_typeName",  "domainType": "NON_DOMAIN",  "assertions": [],  "hasOptionalContainer": false,  "hasCollectionContainer": false,  "hasListContainer": false,  "hasSetContainer": false,  "hasStreamContainer": false,  "containerTypeName": "VAR_containerTypeName",  "containerAssertions": []},  "publishedEventTypeNames": "VAR_publishedEventTypeNames",  "listenedEventTypeName": null,  "getter": false,  "setter": false}], "inheritanceHierarchyTypeNames": "VAR_inheritanceHierarchyTypeNames", "allInterfaceTypeNames": "VAR_allInterfaceTypeNames"}<END>
   */
  @Test
  public void repository_mirror() {
    Assertions.assertThatType(repositoryModel).isNotNull();
    Assertions.assertThat(repositoryModel.getAccessLevel()).isEqualTo(AccessLevel.PUBLIC);
    Assertions.assertThat(repositoryModel.getDeclaringTypeName()).isEqualTo("com.example.repo.UserRepository");
    Assertions.assertThat(repositoryModel.getInterfaceTypeNames()).contains("com.example.repo.UserRepository", "com.example.repo.ReadOnlyRepository", "com.example.repo.Repository", "com.example.repo.QueryRepository", "com.example.repo.AggregateRootRepository");
    Assertions.assertThat(repositoryModel.getEnumOptionTypeNames()).isNullOrEmpty();
    Assertions.assertThat(repositoryModel.getIdentityFieldOption()).isNull();
    Assertions.assertThat(repositoryModel.getIdentityReadMethodOption()).isNull();
    Assertions.assertThat(repositoryModel.getIdentityWriteMethodOption()).isNull();
    Assertions.assertThat(repositoryModel.getVersionFieldOptions()).hasSize(1);
    Assertions.assertThat(repositoryModel.getVersionFieldOptions()).contains(new VersionFieldModel("VAR_versionField", false, false, false, "java.lang.Long", "VAR_readMethod", "VAR_writeMethod"));
    Assertions.assertThat(repositoryModel.getInheritanceHierarchyTypeNames()).isNullOrEmpty();
    Assertions.assertThat(repositoryModel.getAllInterfaceTypeNames()).contains("com.example.repo.UserRepository", "com.example.repo.ReadOnlyRepository", "com.example.repo.Repository", "com.example.repo.QueryRepository", "com.example.repo.AggregateRootRepository");
    Assertions.assertThat(repositoryModel.getMethods()).hasSize(11);
    MethodModel findMethod = Assertions.assertThat(repositoryModel.getMethods()).extracting(MethodModel::getMethodName).contains("find").get(0).get();
    Assertions.assertThat(findMethod.getAccessLevel()).isEqualTo(AccessLevel.PUBLIC);
    Assertions.assertThat(findMethod.getDeclaringTypeName()).isEqualTo("com.example.repo.UserRepository");
    Assertions.assertThat(findMethod.getMethodName()).isEqualTo("find");
    Assertions.assertThat(findMethod.getParamtions()).isNullOrEmpty();
    Assertions.assertThat(findAllMethod.getReturnType()).isNotNull();
    Assertions.assertThat(findAllMethod.getReturnType().getTypeName()).isEqualTo("java.util.List");
    Assertions.assertThat(findAllMethod.getReturnType().getDomainType()).isEqualTo(Domaintions()).isNullOrEmpty();
    Assertions.assertThat(findAllMethod.getReturnType()).isNotNull();
    Assertions.assertThat(findAllMethod.getReturnType().getTypeName()).isEqualTo("java.util.List");
    Assertions.assertThat(findAllMethod.getReturnType().getDomainType()).isEqualTo(Domaintions()).isNullOrEmpty();
    Assertions.assertThat(findAllMethod.getReturnType()).isNotNull();
    Assertions.assertThat(findAllMethod.getReturnType().getTypeName()).isEqualTo("java.util.List");
    Assertions.assertThat(findAllMethod.getReturnType().getDomainType()).isEqualTo(Domaintions()).isNullOrEmpty();
    Assertions.assertThat(findAllMethod.getReturnType()).isNotNull();
    Assertions.assertThat(findAllMethod.getReturnType().getTypeName()).isEqualTo("java.util.List");
    Assertions.assertThat(findAllMethod.getReturnType().getDomainType()).isEqualTo(Domaintions()).isNullOrEmpty();
    Assertions.assertThat(findAllMethod.getReturnType()).isNotNull();
    Assertions.assertThat(findAllMethod.getReturnType().getTypeName()).isEqualTo("java.util.List");
    Assertions.assertThat(findAllMethod.getReturnType().getDomainType()).isEqualTo(DomainType.NON_DOMAIN);
    Assertions.assertThat(findAllMethod.getPublishedEventTypeNames()).isEqualTo("VAR_publishedEventTypeNames");
    Assertions.assertThat(findAllMethod.getListenedEventTypeName()).isNull();
    Assertions.assertThat(findAllMethod.getGetter()).isFalse();
    Assertions.assertThat(findAllMethod.getSetter()).isFalse();
    MethodModel findByEmailMethod = Assertions.assertThat(repositoryModel.getMethods()).extracting(MethodModel::getMethodName).contains("findByEmail").get(0).get();
    Assertions.assertThat(findByEmailMethod.getAccessLevel()).isEqualTo(AccessLevel.PUBLIC);
    Assertions.assertThat(findByEmailMethod.getDeclaringTypeName()).isEqualTo("com.example.repo.UserRepository");
    Assertions.assertThat(findByEmailMethod.getMethodName()).isEqualTo("findByEmail");
    Assertions.assertThat(findByEmailMethod.getParamtions()).isNullOrEmpty();
    Assertions.assertThat(findByEmailMethod.getReturnType()).isNotNull();
    Assertions.assertThat(findByEmailMethod.getReturnType().getTypeName()).isEqualTo("java.util.List");
    Assertions.assertThat(findByEmailMethod.getReturnType().getDomainType()).isEqualTo(Domaintions()).isNullOrEmpty();
    Assertions.assertThat(findByEmailMethod.getReturnType()).isNotNull();
    Assertions.assertThat(findByEmailMethod.getReturnType().getTypeName()).isEqualTo("java.util.List");
    Assertions.assertThat(findByEmailMethod.getReturnType().getDomainType()).isEqualTo(DomainType.NON_DOMAIN);
    Assertions.assertThat(findByEmailMethod.getPublishedEventTypeNames()).isEqualTo("VAR_publishedEventTypeNames");
    Assertions.assertThat(findByEmailMethod.getListenedEventTypeName()).isNull();
    Assertions.assertThat(findByEmailMethod.getGetter()).isFalse();
    Assertions.assertThat(findByEmailMethod.getSetter()).isFalse();
    MethodModel findByEmailAndLastnameMethod = Assertions.assertThat(repositoryModel.getMethods()).extracting(MethodModel::getMethodName).contains("findByEmailAndLastname").get(0).get();
    Assertions.assertThat(findByEmailAndLastnameMethod.getAccessLevel()).isEqualTo(AccessLevel.PUBLIC);
    Assertions.assertThat(findByEmailAndLastnameMethod.getDeclaringTypeName()).isEqualTo("com.example.repo.UserRepository");
    Assertions.assertThat(findByEmailAndLastnameMethod.getMethodName()).isEqualTo("findByEmailAndLastname");
    Assertions.assertThat(findByEmailAndLastnameMethod.getParamtions()).isNullOrEmpty();
    Assertions.assertThat(findByEmailAndLastnameMethod.getReturnType()).isNotNull();
    Assertions.assertThat(findByEmailAndLastnameMethod.getReturnType().getTypeName()).isEqualTo("java.util.List");
    Assertions.assertThat(findByEmailAndLastnameMethod.getReturnType().getDomainType()).isEqualTo(DomainType.NON_DOMAIN);
    Assertions.assertThat(findByEmailAndLastnameMethod.getPublishedEventTypeNames()).isEqualTo("VAR_publishedEventTypeNames");
    Assertions.assertThat(findByEmailAndLastnameMethod.getListenedEventTypeName()).isNull();
    Assertions.assertThat(findByEmailAndLastnameMethod.getGetter()).isFalse();
    Assertions.assertThat(findByEmailAndLastnameMethod.getSetter()).isFalse();
    MethodModel findByEmailOrLastnameMethod = Assertions.assertThat(repositoryModel.getMethods()).extracting(MethodModel::getMethodName).contains("findByEmailOrLastname").get(0).get();
    Assertions.assertThat(findByEmailOrLastnameMethod.getAccessLevel()).isEqualTo(AccessLevel.PUBLIC);
    Assertions.assertThat(findByEmailOrLastnameMethod.getDeclaringTypeName()).isEqualTo("com.example.repo.UserRepository");
    Assertions.assertThat(findByEmailOrLastnameMethod.getMethodName()).isEqualTo("findByEmailOrLastname");
    Assertions.assertThat(findByEmailOrLastnameMethod.getParamtions()).isNullOrEmpty();
    Assertions.assertThat(findByEmailOrLastnameMethod.getReturnType()).isNotNull();
    Assertions.assertThat(findByEmailOrLastnameMethod.getReturnType().getTypeName()).isEqualTo("java.util.List");
    Assertions.assertThat(findByEmailOrLastnameMethod.getReturnType().getDomainType()).isEqualTo(DomainType.NON_DOMAIN);
    Assertions.assertThat(findByEmailOrLastnameMethod.getPublishedEventTypeNames()).isEqualTo("VAR_publishedEventTypeNames");
    Assertions.assertThat(findByEmailOrLastnameMethod.getListenedEventTypeName()).isNull();
    Assertions.assertThat(findByEmailOrLastnameMethod.getGetter()).isFalse();
    Assertions.assertThat(findByEmailOrLastnameMethod.getSetter()).isFalse();
    MethodModel findByEmailAndLastnameOrEmailMethod = Assertions.assertThat(repositoryModel.getMethods()).extracting(MethodModel::getMethodName).contains("findByEmailAndLastnameOrEmail").get(0).get();
    Assertions.assertThat(findByEmailAndLastnameOrEmailMethod.getAccessLevel()).isEqualTo(AccessLevel.PUBLIC);
    Assertions.assertThat(findByEmailAndLastnameOrEmailMethod.getDeclaringTypeName()).isEqualTo("com.example.repo.UserRepository");
    Assertions.assertThat(findByEmailAndLastnameOrEmailMethod.getMethodName()).isEqualTo("findByEmailAndLastnameOrEmail");
    Assertions.assertThat(findByEmailAndLastnameOrEmailMethod.getParamtions()).isNullOrEmpty();
    Assertions.assertThat(findByEmailAndLastnameOrEmailMethod.getReturnType()).isNotNull();
    Assertions.assertThat(findByEmailAndLastnameOrEmailMethod.getReturnType().getTypeName()).isEqualTo("java.util.List");
    Assertions.assertThat(findByEmailAndLastnameOrEmailMethod.getReturnType().getDomainType()).isEqualTo(DomainType.NON_DOMAIN);
    Assertions.assertThat(findByEmailAndLastnameOrEmailMethod.getPublishedEventTypeNames()).isEqualTo("VAR_publishedEventTypeNames");
    Assertions.assertThat